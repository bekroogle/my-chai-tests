// AST version: returns an Abstract Syntax Tree.
 
// Refactors subtraction into adding negatives.
// e.g. 1-2-3 is treated as 1+(-2)+(-3).
//
// Refactors division into multiplying by a reciprocal.
// e.g. 1024/2/2 is treated as 1024 * 1/2 * 1/2.
//
// Author: Benjamin J. Kruger <bekroogle@gmail.com
 
/*
The MIT License (MIT)
 
Copyright (c) 2014 Benjamin J. Kruger
 
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
 
{
  var symbol_table = [
    { 
      name: "pi",
      type: "real",
      value: 3.14
    },
    {
      name: "e",
      type: "real",
      value: 2.718
    }
  ];

  var lookup = function(key, table) {
    var result;
    for (var i = 0; i < table.length; i++) {
      if (table[i].name === key) {
        return table[i].value;
      } else {
        table.push({name: key, type: "integer", value: 0});
      }
    }
  };


  // Calculates exponents recursively:
  var power = function(base, exp) {
    if (exp == 0) {
      return 1;
    } else {
      return base * power(base, exp-1);
    }
  };

  // Traverses Abstract Syntax Tree:
  var traverse = function(ast) {
  if (ast.token === "number") {
    return ast.lexeme;
  } else if (ast.token === "variable") {
    return ast.value;
  } else if (ast.token === "oper") {
    switch (ast.lexeme) {
      case "+": return traverse(ast.children[0]) + traverse(ast.children[1]);
      case "*": return traverse(ast.children[0]) * traverse(ast.children[1]);
      case "/": return traverse(ast.children[0]) / traverse(ast.children[1]);
      case "^": return power(traverse(ast.children[0]), traverse(ast.children[1]));
   }
  }
 };
}
 
start = a:add { console.log("a: " + JSON.stringify(a)); return traverse(a); }
 
add
  = l:subtract '+' r:add { return {token: 'oper', lexeme: '+', children: [l, r]}; }
  / subtract
 
subtract
  = l:neg r:subtract { return {token: 'oper', lexeme: '+', children: [l, r]}; }
  / neg
 
neg
  = '-' n:mult { return {token: 'oper', lexeme: '*', children: [n, {token: 'number', lexeme: -1}]}; }
  / mult
 
mult 
  = l:div '*' r:mult { return {token: 'oper', lexeme: '*', children: [l, r]}; }
  / div
 
div
  = num:recip denom:div { return {token: 'oper', lexeme: '*', children: [num, denom]}; }
  / recip
 
recip
  = '/' n:number { return {token: 'oper', lexeme: '/', children: [{token: 'number', lexeme: '1'}, n]}; }
  / power

power
  = x:parens '^' y:power {return {token: 'oper', lexeme: '^', children: [x, y]}; }
  / parens
 
parens
  = '(' a:add ')' {return a;}
  / value

value
  = i:id {return {token: 'variable', value: lookup(i,symbol_table)}; }
  / number
 
id = [_a-zA-Z][_a-zA-Z0-9]* { return text(); }
number = [0-9]+ { return {token: 'number', lexeme: parseInt(text(),10)}; }