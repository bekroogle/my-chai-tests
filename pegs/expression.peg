/*
 * Simple Arithmetics Grammar
 * ==========================
 *
 * Accepts expressions like "2 * (3 + 4)" and computes their value.
 *
 * This code was forked/modified from:
 * 		github.com/dmajda/pegjs/examples/arithmetics.pegjs
 *
 */

{
  function combine(first, rest, combiners) {
    var result = first, i;

    for (i = 0; i < rest.length; i++) {
      result = combiners[rest[i][1]](result, rest[i][3]);
    }

    return result;
  }

  function pow(x, y) {
  	if (y === 0) {
  		return 1;
  	} else {
  		return x * pow(x, y - 1);
  	}
  }
}

Expression
  = first:Term rest:(_ ('+' / '-') _ Term)* {
      return combine(first, rest, {
        '+': function(left, right) { return left + right; },
        '-': function(left, right) { return left - right; }
      });
    }

Term
  = first:Exponent rest:(_ ('*' / '/') _ Exponent)* {
      return combine(first, rest, {
        "*": function(left, right) { return left * right; },
        "/": function(left, right) { return left / right; }
      });
    }
Exponent
	= base:Factor '^' power:Exponent { return pow(base, power);}
	/ Factor
	
Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / Number

Number
	= Float
	/ Integer

Integer "integer"
  = [0-9]+ _ { return parseInt(text(), 10); }

Float
	= [0-9]* '.' [0-9]+ { return parseFloat(text());}

_ "whitespace"
  = [ \t\n\r]* {return '';}
